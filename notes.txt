// so after log-in/sign up, i want it to take user to their home message board

// still need to figure out how to get age by birthdate

// still need to put google maps on the homepage

// still need to connect google maps to parks etc

// make posting to message boards!!

// button to add message to board?
// GOOGLE MAPS CREDENTIALS

// need to have a delete function! for message board
// do i need to import json?
// make view for user to see user details

// search functions

// confused about how to account for /where to get/put the list of zipcodes in each region so that i can connect zipcodes to region and region to zipcodes

// for parkmap - use location? / enter zipcode
// can i do keyword search IN parks for playground??
ADD PARKS TO DATABASE!!!!! ??


SHOULD I PUT THE REGION CREATION IN THE CREATE USER FUNCTION


also figure out how to get data from json query response into database
___________

const locale = {'loc': userLocation}
        const parkInfo = new google.maps.InfoWindow();
        fetch ('/local', {
          method: 'POST',
          body: JSON.stringify(locale),
          headers: {
            'Content-Type': 'application/json'
          },

        })
        .then((response)=> response.json())
        .then((responseJson) => {
            // console.log(responseJson)
            // <img
                  // src="/static/img/polarbear.jpg"
                   // alt="polarbear"
            // />
           for (const park of responseJson) {
            const parkInfoContent = `
            <div class="window-content">
              <div class="park-thumbnail">
                
            </div>

            <ul class="park-info">
              <li><b>Park Geometry:</b>${park.geometry}</li>
              <li><b>Park Latitude:</b>${park.geometry.location['lat']}</li>
              <li><b>Park Latitude:</b>${park.geometry.location['lng']}</li>
              <li><b>Park Icon:</b>${park.icon}</li>
              <li><b>Park Name:</b>${park.name}</li>
              <li><b>Park Hours:</b>${park.opening_hours}</li>
              <li><b>Park Photos:</b>${park.photos}</li>
              <li><b>Park Address:</b>${park.vicinity}</li>
            </ul>
          </div>
            `;
            const parkMarker = new google.maps.Marker({
              position: {
                lat : park.geometry.location['lat'],
                lng: park.geometry.location['lng'],
              },
              title: `Park Name: ${park.name}`,
              // icon: {
              //   url: '${park.icon}',
              //   scaledSize: new google.maps.Size(50, 50),
              // },
              map, // same as saying map: map
            });
    
            parkMarker.addListener('click', () => {
              parkInfo.close();
              parkInfo.setContent(parkInfoContent);
              parkInfo.open(map, parkMarker);
            });




          }

        });


        new google.maps.Marker({
          position: userLocation,
          map,
        });

        map.setCenter(userLocation);
        map.setZoom(12);
      } else {
        alert(`Geocode was unsuccessful for the following reason: ${status}`);
      }
    });




_______________






// <script
// async
//   src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCBAi6UglC70WempK9I8qLUHiHKkNuWBy0&callback=CALLBACK">
// </script>







const userZip = document.querySelector('#zipcode').value

function initMap() {

    const geocoder = new google.maps.Geocoder();
            geocoder.geocode({ address: userZip }, (results, status) => {
        if (status === 'OK') {
        // Get the coordinates of the user's location
        const userLocation = results[0].geometry.location;

    const basicMap = new google.maps.Map(document.querySelector('#map'), {
                center: userLocation,
                zoom: 11,
              });
    
    const plotParks = (parks) => {
                // array of parks, use marker to plot on map and fit bounds to center
            }
            // PlacesService(mapTarget.current)
    const service = new window.google.maps.places.PlacesService(basicMap);
            
            // radius in meters so I added mile to radius, seems correct, formula pulled from SO ha
    const radiusInMeters = (Math.round(10000*(radiusMiles*5280 / 3.281))/10000);
            
    // location: mapTarget.current.getCenter()
    service.nearbySearch(
        {location: basicMap.getCenter(), radius: radiusInMeters, type: ['playground']},
        (results, status, pagination) => {
            if (status !== 'OK' || !results.length) {
                        alert('No parks found near you, try increasing your radius or try a new address');
        } else {
            plotParks(results);
                    }
        });
   

}})}



// const userZip = document.querySelector('#zipcode').value

// function initMap() {

//     const geocoder = new google.maps.Geocoder();
//             geocoder.geocode({ address: userZip }, (results, status) => {
//         if (status === 'OK') {
//         // Get the coordinates of the user's location
//         const userLocation = results[0].geometry.location;

//     const basicMap = new google.maps.Map(document.querySelector('#map'), {
//                 center: userLocation,
//                 zoom: 11,
//               });
    
    // const plotParks = (parks) => {
    //             // array of parks, use marker to plot on map and fit bounds to center
    //         }
    //         // PlacesService(mapTarget.current)
    // const service = new window.google.maps.places.PlacesService(basicMap);
            
    //         // radius in meters so I added mile to radius, seems correct, formula pulled from SO ha
    // const radiusInMeters = (Math.round(10000*(radiusMiles*5280 / 3.281))/10000);
            
    // // location: mapTarget.current.getCenter()
    // service.nearbySearch(
    //     {location: basicMap.getCenter(), radius: radiusInMeters, type: ['playground']},
    //     (results, status, pagination) => {
    //         if (status !== 'OK' || !results.length) {
    //                     alert('No parks found near you, try increasing your radius or try a new address');
    //     } else {
    //         plotParks(results);
    //                 }
    //     });
   

// }})}



// function initMap() {
//     // Code that works with Google Maps here
//     document.querySelector('#playground-search').addEventListener('click', () => {
//         const userZip = prompt ('enter a zipcode');

//     //     const plotParks = (parks) => {
//     //     // array of parks, use marker to plot on map and fit bounds to center
//       // }
//       const basicMap = new google.maps.Map(document.querySelector('#map'), {
//         center: userZip,
//         zoom: 11,
//       });

//         const geocoder = new google.maps.Geocoder();
//         geocoder.geocode({ address: userZip }, (results, status) => {
//       if (status === 'OK') {
//         // Get the coordinates of the user's location
//         const userLocation = results[0].geometry.location;

//         // Create a marker
//         new google.maps.Marker({
//           position: userLocation,
//           map,
//         });

//         // Zoom in on the geolocated location
//         map.setCenter(userLocation);
//         map.setZoom(18);
//       } else {
//         alert(`Geocode was unsuccessful for the following reason: ${status}`);
//       }
//     });
//   });
//     const service = new window.google.maps.places.PlacesService(userLocation)
//     // const service = new window.google.maps.places.PlacesService(mapTarget.current);
    
//     // radius in meters so I added mile to radius, seems correct, formula pulled from SO ha
//     const radiusInMeters = (Math.round(10000*(radiusMiles*5280 / 3.281))/10000);
//     // const plotParks = (parks) => {
//     //     // array of parks, use marker to plot on map and fit bounds to center
//     // }
//     service.nearbySearch(
//         {location: userLocation.getCenter(), radius: radiusInMeters, type: ['playground']},
//         (results, status, pagination) => {
//             if (status !== 'OK' || !results.length) {
//                 alert('No parks found near you, try increasing your radius or try a new address');
//         } else {
//             plotParks(results);
//                     }
//         });
//   }







 ////{{ rating.movie.title }}:
        <span class=rating_num_{{ rating.rating_id }} >
            {{ rating.score }}
        </span>////

        <div class='message'>
    <h3>{{ message['title'] }}</h3>
    <p>{{ message['content'] }}</p>
</div>
{% endfor %}

 <!-- <script src="/static/js/parkmaps.js"></script>
    <script 
    async
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCBAi6UglC70WempK9I8qLUHiHKkNuWBy0&libraries=places&callback=initMap">
  </script> -->


</p>
      
    <!-- <p>

      <script
  async
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCBAi6UglC70WempK9I8qLUHiHKkNuWBy0&callback=CALLBACK">
</script> -->
    </p>

 <!-- <script
    async
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCBAi6UglC70WempK9I8qLUHiHKkNuWBy0&callback=initMap">
  </script>  -->




  https://maps.googleapis.com/maps/api/place/textsearch/json?query=park+in+[zipcode]&key=[apikey]






  <!-- <ul>
    <p>
{% for message in user.messages %}
    <li>
        {{ message.message_id }}
        <span class='message {{message.message_id}}'>
            <h3>{{ message.timestamp }}</h3>
            <p>{{ message.message }}</p>
        </span>
    </li>
    </p>    
{% endfor %}
</ul> -->

@app.route('/parks')
def parks_in_region():
    region_id = session['user_id']
    # email = request.form.get("email")
    # user = crud.get_user_by_email(email)
    # region_id = crud.get_user_region(user)
    parks = []

    for park in crud.get_all_parks_by_region(region_id):
            parks.append({
            "id": park.park_id,
            "park name": park.park_name,
            "address": park.park_address,   
#add all messages by park?
#be able to click on park and take to a park page?
        }) 
    return parks


         })
    .then((response)=> response.json())
    .then((responseJson) => {
                  // console.log(responseJson)
                  // <img
                        // src="/static/img/polarbear.jpg"
                         // alt="polarbear"
                  // /)
      for (const park of responseJson) 
        allParks.push(park){
        console.log(park)
        const parkInfoContent = `
          <div class="window-content">
            <div class="park-thumbnail">
                      
            </div>




             fetch ('/local', {
    method: 'POST',
    body: JSON.stringify(locale),
    headers: {
      'Content-Type': 'application/json'
         
  })
    .then((response)=> response.json())
    .then((responseJson) => {
                  // console.log



                  // const userZip = document.querySelector('#zipcode').value

const userZip = document.querySelector('#zipcode').innerText;
console.log(userZip)

const fetchKeyword = (keyword, accumulator, checker) => {
  fetch(`/local/${keyword}`, {
    method: 'POST',
    body: JSON.stringify(locale),
    headers: {
      'Content-Type': 'application/json'
    }    
  })
  .then((response)=> response.json())
  .then((responseJson) => {
    for (const park of responseJson) {
      if (!checker.has(park.id)) {
        accumulator.push(park);
        checker.add(park.park_id);
      }
    }
  })
}

function initMap() {
  const geocoder = new google.maps.Geocoder();
  const keywords = ['parks', 'playgrounds'];
  const placeIds = Set();
  const allParks = [];

  geocoder.geocode({ address: userZip }, (results, status) => {
    if (status === 'OK') {
         // // Get the coordinates of the user's location
      // const userLocation = results[0].geometry.location;
      //   const latitude = results[0].geometry.location.lat();
      //   const longitude = results[0].geometry.location.lng();

      // const userLocation = ("Latitude: " + latitude + "\nLongitude: " + longitude);
      const userLocation = results[0].geometry.location;
      userLat = results[0].geometry.location.lat();
      userLng = results[0].geometry.location.lng();
      console.log(userLat)
      console.log(userLng)
      console.log('line 22 is hit')
      // Create a marker
    
      
  const locale = {'loc': userLocation, 'zipcode': userZip}
  const parkInfo = new google.maps.InfoWindow();      
      const map = new google.maps.Map(document.querySelector('#map'), {
        center: {lat: userLat, lng: userLng},
        zoom: 11,
      });
      
      keywords.forEach((keyword) => {
        fetchKeyword(keyword, allParks, placeIds);
      })
      

      

  fetch ('/local', {
    method: 'POST',
    body: JSON.stringify(locale),
    headers: {
      'Content-Type': 'application/json'
         
  })
    .then((response)=> response.json())
    .then((responseJson) => {
                  // console.log(responseJson)
                  // <img
                        // src="/static/img/polarbear.jpg"
                         // alt="polarbear"
                  // /)
      for (const park of responseJson) 

        console.log(park
        allParks.push(park);)
       
         const parkInfoContent = `
          <div class="window-content">
            <div class="park-thumbnail">
                      
            </div>
      
            <ul class="park-info">
              <li><b>Park Geometry:</b>${park.geometry}</li>
              <li><b>Park Latitude:</b>${park.geometry.location['lat']}</li>
              <li><b>Park Latitude:</b>${park.geometry.location['lng']}</li>
              <li><b>Park Icon:</b>${park.icon}</li>
              <li><b>Park Name:</b>${park.name}</li>
              <li><b>Park Hours:</b>${park.opening_hours}</li>
              <li><b>Park Photos:</b>${park.photos}</li>
              <li><b>Park Address:</b>${park.vicinity}</li>
            </ul>
          </div>
                  `;
        const parkMarker = new google.maps.Marker({
          position: {
            lat : park.geometry.location['lat'],
            lng: park.geometry.location['lng'],
          },
          title: `Park Name: ${park.name}`,
                    // icon: {
                    //   url: '${park.icon}',
                    //   scaledSize: new google.maps.Size(50, 50),
                    // },
           map, // same as saying map: map
          }); 
          console.log('line 65 is hit')
          parkMarker.addListener('click', () => {
            parkInfo.close();
            parkInfo.setContent(parkInfoContent);
            parkInfo.open(map, parkMarker);
          });
      
          }})}})


"https://maps.googleapis.com/maps/api/place/textsearch/json?query={keyword}&location={lat},{lng}&radius=2000&region=us&type=cafe,bakery&key=MY_API_KEY"



<!-- <div class="col-3">
    <div class="box-login">
  <h2>Log In</h2>
  <form action="/login" method="POST">
    <p>
      Email <input type="text" name="email">
    </p>

    <p>
      Password <input type="password" name="password">
    </p>

    <p>
      <input type="submit">
    </p>
  </form>
  </div>
</div> -->